CREATE OR REPLACE FUNCTION execute_sql(query text) 
RETURNS jsonb 
LANGUAGE plpgsql
AS $$
DECLARE
  result jsonb;
  clean_query text := rtrim(query, ';');
BEGIN
  EXECUTE 'SELECT jsonb_agg(t) FROM (' || clean_query || ') t' INTO result;
  RETURN result;
END;
$$;

CREATE OR REPLACE FUNCTION update_updated_at()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = CURRENT_TIMESTAMP;
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;


create table public.consumed_foods (
  id uuid not null default extensions.uuid_generate_v4 (),
  daily_nutrition_id uuid null,
  food_name text not null,
  calories integer not null,
  protein double precision null,
  carbs double precision null,
  fat double precision null,
  image_url text null,
  consumed_at timestamp with time zone null default CURRENT_TIMESTAMP,
  constraint consumed_foods_pkey primary key (id),
  constraint consumed_foods_daily_nutrition_id_fkey foreign KEY (daily_nutrition_id) references daily_nutrition (id)
) TABLESPACE pg_default;

create table public.daily_nutrition (
  id uuid not null default extensions.uuid_generate_v4 (),
  user_id uuid null,
  date date not null,
  total_calories integer not null default 0,
  created_at timestamp with time zone null default CURRENT_TIMESTAMP,
  updated_at timestamp with time zone null default CURRENT_TIMESTAMP,
  constraint daily_nutrition_pkey primary key (id),
  constraint daily_nutrition_user_id_date_key unique (user_id, date),
  constraint daily_nutrition_user_id_fkey foreign KEY (user_id) references auth.users (id)
) TABLESPACE pg_default;


create table public.sensor_data (
  id bigint generated by default as identity not null,
  created_at timestamp with time zone not null default timezone ('utc'::text, now()),
  beat_avg double precision null,
  ir_value double precision null,
  humidity double precision null,
  temperature_c double precision null,
  temperature_f double precision null,
  heat_index_c double precision null,
  heat_index_f double precision null,
  constraint sensor_data_pkey primary key (id)
) TABLESPACE pg_default;



create table public.conversations (
  id uuid not null default extensions.uuid_generate_v4 (),
  user_id uuid null,
  title text not null,
  created_at timestamp with time zone null default CURRENT_TIMESTAMP,
  updated_at timestamp with time zone null default CURRENT_TIMESTAMP,
  constraint conversations_pkey primary key (id),
  constraint conversations_user_id_fkey foreign KEY (user_id) references auth.users (id) on delete CASCADE
) TABLESPACE pg_default;

create trigger update_conversations_updated_at BEFORE
update on conversations for EACH row
execute FUNCTION update_updated_at ();

create table public.messages (
  id uuid not null default extensions.uuid_generate_v4 (),
  conversation_id uuid null,
  role text not null,
  content text not null,
  tool_invocations jsonb null,
  created_at timestamp with time zone null default CURRENT_TIMESTAMP,
  constraint messages_pkey primary key (id),
  constraint messages_conversation_id_fkey foreign KEY (conversation_id) references conversations (id) on delete CASCADE
) TABLESPACE pg_default;